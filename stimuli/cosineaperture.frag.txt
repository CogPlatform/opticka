/*
 * File: ApertureSineGratingShader.frag.txt
 * Shader for drawing of basic parameterized sine grating patches.
 * Applies a circular aperture of radius 'Radius'.
 *
 * (c) 2010 by Mario Kleiner, licensed under GPL.
 *       
 */

const float halfpi = 0.5 * 3.141592654;

uniform float Radius;
uniform vec2  Center;

uniform vec4 Offset;

float Dist;
float Mod = 1.0;

varying vec4  baseColor;
varying float Phase;
varying float FreqTwoPi;
varying float Sigma;

void main()
{
    /* Query current output texel position: */
    vec2 pos = gl_TexCoord[0].xy;

    /* find our distance from center */
    Dist = distance(pos, Center);

    /* If distance to center (aka radius of pixel) > Radius, discard this pixel: */
    if (Dist > Radius) discard;

    /* Calculate a cosine modifier using our distance from radius and a Sigma */
    if (Sigma > 0.0)
    {
        Mod = ((Sigma - (Radius - Dist)) / Sigma);
        //if (Mod > 1.0) Mod = 1.0;
        //if (Mod < 0.0) Mod = 0.0;
        Mod = clamp(Mod, 0.0, 1.0)
        Mod = cos(Mod * halfpi);
    }

    /* Evaluate sine grating at requested position, frequency and phase: */
    float sv = sin(pos.x * FreqTwoPi + Phase);

    /* Multiply/Modulate base color and alpha with calculated sine          */
    /* values, add some constant color/alpha Offset, assign as final fragment */
    /* output color: */
    gl_FragColor = (baseColor * (sv * Mod)) + Offset;
    gl_FragColor.a = Mod;
}